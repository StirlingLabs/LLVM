name: Build
on:
  push:
    tags:
      - 'v[0-9]+.*'

defaults:
  run:
    shell: bash

jobs:
  version:
    name: Check Version
    runs-on: ubuntu-latest
    outputs:
      long: ${{ steps.good.outputs.long }}
      short: ${{ steps.good.outputs.short }}
    steps:
      - name: Good Version
        id: good
        if: |
            github.ref_type == 'tag' &&
            startsWith(github.ref_name, 'v')
        run: |
          if [[ ${version:1:2} =~ ^-?[0-9]+$ ]]; then
            echo "::set-output name=long::${version:1}"
            echo "::set-output name=short::${version:1:2}"
          else
            echo "LLVM version ${version:1:2}, derived from -- $version -- is not numeric."
            exit 1
          fi
        env:
          version: ${{ github.ref_name }}
      - name: Bad Version
        id: bad
        if: |
            github.ref_type != 'tag' ||
            !startsWith(github.ref_name, 'v')
        run: |
          echo "The build script expects tag to be in the format v14.0.6"
          exit 1

  build:
    name: Build LLVM
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
          os: [ubuntu-22.04, macos-12, windows-2022]
      fail-fast: false
    needs: version
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout LLVM
        uses: actions/checkout@v3
        with:
          repository: 'llvm/llvm-project'
          ref: 'release/${{ needs.version.outputs.short }}.x'
      - name: Checkout snmalloc
        if: startsWith(matrix.os, 'windows')
        uses: actions/checkout@v3
        with:
          repository: 'microsoft/snmalloc'
          ref: '0.6.0'
          path: 'snmalloc'
      - name: Checkout patches
        uses: actions/checkout@v3
        with:
          path: 'local'
      - name: Apply patches
        run: |
          find local/patches -type f -name '*.patch' -exec patch -f -u -p0 -i {} \;
      - name: Setup MS Build
        if: startsWith(matrix.os, 'windows')
        uses: microsoft/setup-msbuild@v1.1
      - name: Install Dependencies
        run: |
          case "${RUNNER_OS}" in
              Linux)    sudo apt install ninja-build llvm;;
              macOS)    brew install ninja;;
              Windows)  echo "No need for Ninja on Win" ;;
              *)        echo "Do not recognise ${RUNNER_OS}." && exit 1
          esac
        env:
          os: ${{ matrix.os }}
          HOMEBREW_NO_ENV_HINTS: true
      - name: Configure Build
        run: |
          mkdir release
          mkdir build
          cd build
          platform=""
          winBin="C:/Program\ Files/LLVM/bin"
          #toolchain="-TClangCL,host=x64 -A x64 -DCMAKE_C_COMPILER=\"${winBin}/clang-cl.exe\" -DCMAKE_CXX_COMPILER=\"${winBin}/clang-cl.exe\" -DCMAKE_LINKER=\"${winBin}/lld-link.exe\" -DCMAKE_RANLIB=\"${winBin}/llvm-ranlib.exe\" -DCMAKE_AR=\"${winBin}/llvm-ar.exe\""
          toolchain="-TClangCL,host=x64 -A x64"
          echo $toolchain
          case "${RUNNER_OS}" in
              Linux)    platform="-G Ninja -DLLVM_LINK_LLVM_DYLIB=ON -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_RANLIB=/usr/bin/llvm-ranlib -DCMAKE_AR=/usr/bin/llvm-ar";;
              macOS)    platform="-DCMAKE_OSX_ARCHITECTURES='x86_64;arm64' -G Ninja -DLLVM_LINK_LLVM_DYLIB=ON";;
              Windows)  platform="-DLLVM_USE_CRT_RELEASE=MT -DLLVM_INTEGRATED_CRT_ALLOC=../../snmalloc ${toolchain}";;
              *)        echo "Do not recognise ${RUNNER_OS}." && exit 1
          esac
          echo Platform-specific arguments: $platform
          cmake .. $platform \
            -DCMAKE_INSTALL_PREFIX=../release \
            -DCMAKE_PREFIX_PATH=../release \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON \
            -DLLVM_OPTIMIZED_TABLEGEN=ON \
            -DLLVM_INCLUDE_TESTS=OFF \
            -DLLVM_INCLUDE_BENCHMARKS=OFF \
            -DLLVM_STATIC_LINK_CXX_STDLIB=ON \
            -DLLVM_ENABLE_LTO=Thin \
            -DLLVM_ENABLE_RTTI=ON \
            -DLLVM_ENABLE_EH=ON 
        working-directory: llvm
      - name: Windows
        if: startsWith(matrix.os, 'windows')
        shell: pwsh
        run: |
          msbuild /m -p:Configuration=Release INSTALL.vcxproj
        working-directory: llvm/build
      - name: Posix
        if: |
          startsWith(matrix.os, 'macos') ||
          startsWith(matrix.os, 'ubuntu')
        run: |
          ninja install
        env:
          os: ${{ matrix.os }}
        working-directory: llvm/build
      - name: Collect Files
        run: |
          dir=LLVM-$short
          mkdir $dir
          case "${RUNNER_OS}" in
              Linux)    cp $release/lib/libLLVM-$short.so $dir/;;
              macOS)    cp $release/lib/libLLVM.dylib $dir/libLLVM-$short.dylib;;
              Windows)  cp $release/bin/LLVM-C.dll $dir/LLVM-$short.dll;;
              *)        echo "Do not recognise ${RUNNER_OS}." && exit 1
          esac
          ls -la
        env:
          short: ${{ needs.version.outputs.short }}
          release: 'llvm/release'
      - name: Split Mac Universal Binary for NuPkg
        if: false && startsWith(matrix.os, 'macos')
        run: |
          mkdir arm64
          mkdir x64
          lipo libLLVM-$short.dylib -thin arm64 -output arm64/libLLVM-$short.dylib
          lipo libLLVM-$short.dylib -thin x86_64 -output x64/libLLVM-$short.dylib
        env:
          short: ${{ needs.version.outputs.short }}
        working-directory: LLVM-${{ needs.version.outputs.short }}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: LLVM-${{ matrix.os }}
          path: |
            LLVM-${{ needs.version.outputs.short }}/**
          if-no-files-found: error

  create-release:
    name: Create Release
    needs: [ version, build ]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      - name: Collect Files
        run: |
          ls -laR
          mv */libLLVM-$short.so .
          mv */libLLVM-$short.dylib .
          mv */LLVM-$short.dll .
        env:
          short: ${{ needs.version.outputs.short }}
      - name: Compress Files
        run: |
          upx libLLVM-$short.so
          echo "UPX on Mac requires amd64 architecture (we use x88_64 & arm64)"
          upx LLVM-$short.dll
          ls -la
        env:
          short: ${{ needs.version.outputs.short }}
      - name: Create release on GitHub
        uses: softprops/action-gh-release@v0.1.14
        with:
          name: libLLVM ${{ needs.version.outputs.long }}
          files: |
            libLLVM-$short.so
            libLLVM-$short.dylib
            LLVM-$short.dll
        env:
          short: ${{ needs.version.outputs.short }}
          GITHUB_TOKEN: ${{ github.token }}
      - name: Create NuSpec
        run: |
          text='<?xml version="1.0" encoding="utf-8"?>'
          text='$text<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">'
          text='$text <metadata>'
          text='$text  <id>StirlingLabs.Utilities.LLVM</id>'
          text='$text  <version>$long</version>'
          text='$text  <title>libLLVM</title>'
          text='$text  <description>LLVM is a toolchain that can be used to develop a front end for any programming language.  This package contains the LLVM library for convenient cross-platform use in .Net.</description>'
          text='$text  <authors>LLVM Team, packaged by Stirling Labs</authors>'
          text='$text  <projectUrl>https://github.com/StirlingLabs/libLLVM</projectUrl>'
          text='$text  <readme>docs/README.md</readme>'
          text='$text  <icon>images/icon.png</icon>'
          text='$text  <tags>LLVM library codegen SL</tags>'
          text='$text  <license type="expression">Apache-2.0 with LLVM-exception</license>'
          text='$text  <requireLicenseAcceptance>true</requireLicenseAcceptance>'
          text='$text  <repository type="git" url="https://github.com/StirlingLabs/libLLVM.git" branch="main" commit="$commit" />'
          text='$text </metadata>'
          text='$text <files>'
          text='$text  <file src="../README.md" target="docs/" />'
          text='$text  <file src="../icon.png" target="images/" />'
          text='$text  <file src="libLLVM-$short.so" target="runtimes/linux-x64/native/" />'
          text='$text  <file src="libLLVM-$short.dylib" target="runtimes/osx/native/" />'
          text='$text  <file src="LLVM-$short.dll" target="runtimes/win10-x64/native/" />'
          text='$text </files>'
          text='$text</package>'
          echo $text > libLLVM-$short.nuspec
          cat libLLVM-$short.nuspec
        env:
          commit: ${{ github.sha }}
          long: ${{ needs.version.outputs.long }}
          short: ${{ needs.version.outputs.short }}
      - name: Package Files
        run: |
          nuget pack libLLVM-$short.nuspec
          ls -la
        env:
          short: ${{ needs.version.outputs.short }}
      - name: Upload NuPkg to GitHub 
        run: |
          dotnet nuget push *.nupkg -k ${{github.token}} -s https://nuget.pkg.github.com/${{github.repository_owner}}/index.json --no-symbols --skip-duplicate || true
