name: Build
on:
  push:
    tags:
      - 'v[0-9]+.*'

defaults:
  run:
    shell: bash

jobs:
  version:
    name: Check Version
    runs-on: ubuntu-latest
    outputs:
      long: ${{ steps.good.outputs.long }}
      short: ${{ steps.good.outputs.short }}
      linuxName: libLLVM-${{ steps.good.outputs.short }}.so
      macName: libLLVM-${{ steps.good.outputs.short }}.dylib
      winName: LLVM-${{ steps.good.outputs.short }}.dll
    steps:
      - name: Good Version
        id: good
        if: |
            github.ref_type == 'tag' &&
            startsWith(github.ref_name, 'v')
        run: |
          if [[ ${version:1:2} =~ ^-?[0-9]+$ ]]; then
            echo "::set-output name=long::${version:1}"
            echo "::set-output name=short::${version:1:2}"
          else
            echo "LLVM version ${version:1:2}, derived from -- $version -- is not numeric."
            exit 1
          fi
        env:
          version: ${{ github.ref_name }}
      - name: Bad Version
        id: bad
        if: |
            github.ref_type != 'tag' ||
            !startsWith(github.ref_name, 'v')
        run: |
          echo "The build script expects tag to be in the format v14.0.6"
          exit 1

  build:
    name: Build LLVM
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
          include:
          - os: ubuntu-22.04
            finalName:  ${{ needs.version.outputs.linuxName }}
            dependencies: 'sudo apt install ninja-build upx-ucl'
            builtAs: llvm/release/lib/libLLVM-$short.so
          - os: macos-12
            finalName:  ${{ needs.version.outputs.macName }}
            dependencies: 'brew install ninja upx'
            builtAs: llvm/release/lib/libLLVM.dylib
          - os: windows-2022
            finalName:  ${{ needs.version.outputs.winName }}
            dependencies: 'echo "No Ninja requirement for Windows but need to install UPX"'
            builtAs: llvm/release/bin/LLVM-C.dll
      fail-fast: false
    needs: version
    env: 
      workingDir: llvm/build
      builtDir: llvm/release
      finalDir: libLLVM-${{ needs.version.outputs.short }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
        with:
          repository: 'llvm/llvm-project'
          ref: 'release/${{ needs.version.outputs.short }}.x'
      - name: Setup MS Build
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.1
      - name: Install Dependencies
        run: $deps
        env:
          deps: ${{ matrix.dependencies }}
          HOMEBREW_NO_ENV_HINTS: true
      - name: Configure Build
        run: |
          mkdir $builtDir
          mkdir $workingDir && cd $workingDir
          platform=""
          case "${RUNNER_OS}" in
              Linux)    platform="-G Ninja -DLLVM_LINK_LLVM_DYLIB=ON";;
              macOS)    platform="-DCMAKE_OSX_ARCHITECTURES='x86_64;arm64' -G Ninja -DLLVM_LINK_LLVM_DYLIB=ON";;
              Windows)  platform="-Thost=x64 -A x64";;
              *)        echo "Do not recognise ${RUNNER_OS}." && exit 1
          esac
          cmake .. $platform \
            -DCMAKE_INSTALL_PREFIX=../release \
            -DCMAKE_PREFIX_PATH=../release \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON \
            -DLLVM_OPTIMIZED_TABLEGEN=ON \
            -DLLVM_INCLUDE_TESTS=OFF \
            -DLLVM_INCLUDE_BENCHMARKS=OFF
      - name: Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          msbuild /m -p:Configuration=Release INSTALL.vcxproj
        working-directory: ${{ env.workingDir }}
      - name: Posix
        if: |
          runner.os == 'macOS' ||
          runner.os == 'Linux'
        run: |
          ninja install
        env:
          os: ${{ matrix.os }}
        working-directory: ${{ env.workingDir }}
      - name: Collect Files
        run: |
          mkdir $resultDir
          mv $builtAs $finalDir/$finalName
          ls -la $finalDir
        env:
          builtAs: ${{ matrix.builtAs }}
          finaltName: ${{ matrix.finaltName }}
      - name: (skip) Split Mac Universal Binary for UPX
        if: false && runner.os == 'macOS'
        run: |
          mkdir arm64
          mkdir x64
          lipo $finaltName -thin arm64 -output arm64/$finaltName
          lipo $finaltName -thin x86_64 -output x64/$finaltName
          ls -la
        env:
          finaltName: ${{ matrix.finaltName }}
        working-directory: ${{ env.finalDir }}
      - name: Compress binaries
        uses: svenstaro/upx-action@v2
        if: runner.os != 'macOS'
        with:
          file: ${{ env.finalDir }}/${{ matrix.finalName }}
          args: --best --backup
          strip: false
      - name: Validate compression
        run: |
          ls -la
        working-directory: ${{ env.finalDir }}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: LLVM-${{ runner.os }}
          path: |
            ${{ env.finalDir }}/**
          if-no-files-found: error

  create-release:
    name: Create Release
    needs: [ version, build ]
    runs-on: ubuntu-latest
    env:
      linuxName: Linux/${{ needs.version.outputs.linuxName }}
      macName: macOS/${{ needs.version.outputs.macName }}
      winName: Windows/${{ needs.version.outputs.winName }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      - name: Create NuSpec
        run: |
          text="<?xml version=\"1.0\" encoding=\"utf-8\"?>"
          text="$text\n<package xmlns=\"http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd\">"
          text="$text\n <metadata>"
          text="$text\n  <id>StirlingLabs.Utilities.libLLVM</id>"
          text="$text\n  <version>$long</version>"
          text="$text\n  <title>libLLVM</title>"
          text="$text\n  <description>"
          text="$text\n    LLVM is a toolchain that can be used to develop a front end for any programming language.  
          text="$text\n    This package contains LLVM libraries for convenient cross-platform use in .Net applications.
          text="$text\n  </description>"
          text="$text\n  <authors>LLVM Team, packaged by Stirling Labs</authors>"
          text="$text\n  <projectUrl>https://github.com/StirlingLabs/libLLVM</projectUrl>"
          text="$text\n  <readme>docs/README.md</readme>"
          text="$text\n  <icon>images/icon.png</icon>"
          text="$text\n  <tags>LLVM library codegen SL</tags>"
          text="$text\n  <license type=\"expression\">Apache-2.0 with LLVM-exception</license>"
          text="$text\n  <requireLicenseAcceptance>true</requireLicenseAcceptance>"
          text="$text\n  <repository type=\"git\" url=\"https://github.com/StirlingLabs/libLLVM.git\" branch=\"main\" commit=\"$commit\" />"
          text="$text\n </metadata>"
          text="$text\n <files>"
          text="$text\n  <file src=\"../README.md\" target=\"docs/\" />"
          text="$text\n  <file src=\"../icon.png\" target=\"images/\" />"
          text="$text\n  <file src=\"$linuxName\" target=\"runtimes/linux-x64/native/\" />"
          text="$text\n  <file src=\"$macName\" target=\"runtimes/osx/native/\" />"
          text="$text\n  <file src=\"$winName\" target=\"runtimes/win10-x64/native/\" />"
          text="$text\n </files>"
          text="$text\n</package>"
          echo $text > libLLVM.nuspec
          cat libLLVM-$short.nuspec
        env:
          commit: ${{ github.sha }}
          long: ${{ needs.version.outputs.long }}
      - name: Package Files
        run: |
          nuget pack libLLVM.nuspec
          ls -la
      - name: Upload NuPkg to GitHub 
        run: |
          dotnet nuget push *.nupkg -k ${{github.token}} -s https://nuget.pkg.github.com/${{github.repository_owner}}/index.json --no-symbols --skip-duplicate || true
      - name: Create release on GitHub
        uses: softprops/action-gh-release@v0.1.14
        with:
          name: libLLVM ${{ needs.version.outputs.long }}
          files: |
            ${{ env.linuxName }}
            ${{ env.macName }}
            ${{ env.winName }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
